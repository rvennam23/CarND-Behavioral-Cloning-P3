# -*- coding: utf-8 -*-
"""
Created on Tue Jul 11 16:48:50 2017

@author: rvennam
"""

import pandas as pd
import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, Convolution2D, Input, Lambda
from keras.optimizers import Adam
import tensorflow as tf
import matplotlib.pyplot as plt
import os

from utils import preprocess_img
from utils import training_image_generator
from utils import get_images
from utils import drop_low_steeringangle_data



#Config Parameters
DATA_PATH = "data"
LOG_FILE = os.path.join(DATA_PATH, "driving_log.csv")
BATCH_SIZE = 64
EPOCHS = 5


def build_nvidiamodel(input_shape):
    
    
    def resize_images(img):
        """Returns resized image
        Cannot be directly used in lambda function
        as tf is not understood by keras
        """
        import tensorflow as tf
        return tf.image.resize_images(img, (66, 200))
    
    model = Sequential()
    model.add(Lambda(resize_images, input_shape=input_shape))
    model.add(Lambda(lambda x: x/255.-0.5))
    model.add(Convolution2D(24, 5, 5, border_mode="same", subsample=(2,2), activation="relu"))
    model.add(Convolution2D(36, 5, 5, border_mode="same", subsample=(2,2), activation="relu"))
    model.add(Convolution2D(48, 5, 5, border_mode="valid", subsample=(2,2), activation="relu"))
    model.add(Convolution2D(64, 3, 3, border_mode="valid", activation="relu"))
    model.add(Convolution2D(64, 3, 3, border_mode="valid", activation="relu"))
    model.add(Flatten())
    model.add(Dropout(0.3))
    model.add(Dense(100, activation="relu"))
    model.add(Dense(50, activation="relu"))
    model.add(Dense(10, activation="relu"))
    model.add(Dropout(0.3))
    model.add(Dense(1))
    model.compile(optimizer=Adam(lr=0.001), loss='mse')
    return model

#### Load CSV File generated by simulator
csv_data = pd.read_csv(LOG_FILE, index_col=False)

## Shuffle the entries before splitting the dataset 
csv_data = csv_data.sample(n=len(csv_data))

## Training and Validation Data (85% training set and 15% testset)
training_count = int(0.85 * len(csv_data))
training_data = csv_data[:training_count].reset_index()
validation_data = csv_data[training_count:].reset_index()

## Remove low steering angle data to balance the dataset and to remove the bias
training_data = drop_low_steeringangle_data(training_data)

## extract one sample image to calculate image shape (required for model)
sample_img_path = os.path.join(DATA_PATH, training_data['center'].iloc[5].strip())
sample_img = preprocess_img(plt.imread(sample_img_path))

## Build the model
model = build_nvidiamodel(sample_img.shape)
samples_per_epoch = int(len(training_data) / BATCH_SIZE) * BATCH_SIZE
nb_val_samples = len(validation_data)

## Create generators for training and validation data
values = model.fit_generator(training_image_generator(training_data, BATCH_SIZE, DATA_PATH), samples_per_epoch=samples_per_epoch, nb_epoch=EPOCHS, validation_data=get_images(validation_data, DATA_PATH), nb_val_samples=len(validation_data))

model.save('model.h5')
